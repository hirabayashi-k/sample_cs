//==============================================================================
// 複素数クラスのサンプル

Copyright(C) 2002 Iwanaga Nobuyuki
e-mail   : iwanaga@ise.eng.osaka-u.ac.jp
web page : http://www-ise2.ise.eng.osaka-u.ac.jp/~iwanaga/

//----------------------------------------------------------
// 概要

複素数型みたいに規模が小さくて、計算スピードを最適化したほうがいいものは、
struct で定義して、実部も虚部も public にするほうが現実的だけど、
サンプルということで、ここではあえて違う方針で実装してみます。

このサンプルでは、複素数を2つの異なる方法で実装します。
 1. 実部と虚部をメンバとして持つ    CartesianComplex
 2. 絶対値と偏角をメンバとして持つ  PolarComplex

そして、このサンプルでは2つのクラスを同じ抽象基底クラス Complex から派生させます。

実装を隠蔽し、実部/虚部などにはプロパティを通してアクセスするため、
実装方法の異なる2つの複素数型をまったく同じ形態で利用できるます。
また、2つの複素数型を同じ抽象基底型から派生させているため、
2つのうちどちらの複素数型を利用しているのかを意識せずに複素数計算を行えます。

//----------------------------------------------------------
// Complex クラス

Complex クラスは以下の操作を行うことができます。

・実部/虚部/絶対値/偏角の読み取り/変更
・ + - * / による四則演算
・ == != による比較
・文字列化
 (double型との四則演算/比較も可能)

これらの操作は以下のようにして実現します。

・実部/虚部/絶対値/偏角の読み取り/変更は、
  それぞれ Re / Im / Abs / Arg という名前のプロパティを通して行う。
・+ - * / は実際には Add / Sub / Mul / Div という名前の
  メソッドを呼び出して四則演算を行う。
・== != は Equals メソッドを呼び出して行う。
・Re / Im / Abs / Arg / Add / Sub / Mul / Div / Equals は
  すべて virtual メソッドで、ポリモーフィックな動作をする。
・文字列化は a+ib という形式で行う。
  今のところ、極形式で文字列化したり、format出力する機能はない。

//----------------------------------------------------------
// CartesianComplex クラス

CartesianComplex クラスは実部と虚部をメンバとして持つことで
Complex クラスを実装したものです。
このクラスは以下のような特徴を持ちます。

・実部/虚部の読み出し/変更、加算減算は高速
・絶対値/偏角の読み出し/変更、乗算除算は低速

//----------------------------------------------------------
// PolarComplex クラス

PolarComplex クラスは絶対値と偏角をメンバとして持つことで
Complex クラスを実装したものです。
このクラスは以下のような特徴を持ちます。

・実部/虚部の読み出し/変更、加算減算は低速
・絶対値/偏角の読み出し/変更、乗算除算は高速

つまり、CartesianComplex クラスとは相補的な関係になります。

//----------------------------------------------------------
// ファイル構成

Complex.cs          … Complex のソースファイルです。
CartesianComplex.cs … CartesianComplex のソースファイルです。
PolarComplex.cs     … PolarComplex のソースファイルです。
test.cs             … Complex クラスの動作例を示すためのテストプログラムのソースファイルです。
makefile            … make コマンド用のmakeファイルです。
readme.txt          … このテキストです。

//----------------------------------------------------------
// コンパイル

make を実行してください。

(.NET Framework SDKに標準で付いてくる make は
 "C:\Program Files\Microsoft.NET\FrameworkSDK\Bin\nmake"
 にあります。また、cygwin の make を入れている方はそれを利用してもかまいません。)

make がよく分からない方はコマンドラインで以下のように入力してください。

csc /t:library /out:MyMath.dll Complex.cs CartesianComplex.cs PolarComplex.cs
csc /r:MyMath.dll test.cs

また、コマンドラインの使い方が分からない方で、Visual Studio .NETをお持ちの方は
新規プロジェクト(C# コンソールアプリケーション)を作成し、
Complex.cs と test.cs をプロジェクトに追加し、ビルドしてください。

//----------------------------------------------------------
// 利用方法

test.cs を適当に書き換えて遊んでください。
Complex.cs も適当に書き換えてもらって結構です。
バグなどがありましたら報告をお願いします。
